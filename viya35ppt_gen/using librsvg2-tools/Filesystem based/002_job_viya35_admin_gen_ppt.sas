/*****************************************************************************************************************/
/* job to scan existing svg generated by users and generate corresponding powerpoint back to sas content         */
/* this job is executed in a specific compute context with allowxcmd privileges and visible only for the         */
/* admin user                                                                                                    */
/*****************************************************************************************************************/
/* Prerequisites : librsvg2-tools library must be installed as it is used to convert svg to png.                 */
/*                 Sample commande line used : rsvg-convert -a 1_vi6_vi6_Section.svg > 1_vi6_vi6_Section.svg.png */
/*****************************************************************************************************************/

/***************************************************************************************************/
/* VARIABLES DEFINITIONS                                                                                */
/***************************************************************************************************/

%global CONTENT_DIR;

/* test case 1 */
%let CONTENT_DIR=/Public/Report_exports; /* Parameter content directory to write output generated powerpoint */
/* test case 1 */

%let SAVE_ROOTDIR=/tmp/svg_va_tmp; /* Root directory used to create produced files */
%let SAVE_ROOTDIR_TMP=/tmp/svg_va_tmp/tmp; /* Root directory used to create temp produced files */

/*****************************************************************************************************************/
/* Get the base_uri to make all API calls */
%let BASE_URI = %sysfunc(getoption(servicesbaseurl));
%let BASE_URI = %substr(&BASE_URI, 1, %length(&BASE_URI)-1);

/***************************************************************************************************/
/* MACROS DEFINITIONS                                                                              */
/***************************************************************************************************/

/**
   @file
   @brief Copy any file using binary input / output streams
   @details Reads in a file byte by byte and writes it back out.  Is an
   os-independent method to copy files.  In case of naming collision, the
   default filerefs can be modified.
   Note that if you have a new enough version of SAS, and you don't need features
   such as APPEND, you may be better of using the fcopy() function instead.
         %mp_binarycopy(inloc="/home/me/blah.txt", outref=_webout)
  
   To append to a file, use the mode option, eg:
 
       filename tmp1 temp;
       filename tmp2 temp;
       data _null_;
         file tmp1;
         put 'stacking';
       run;
  
       %mp_binarycopy(inref=tmp1, outref=tmp2, mode=APPEND)
       %mp_binarycopy(inref=tmp1, outref=tmp2, mode=APPEND)
**/
  
 %macro mp_binarycopy(
     inloc=           /* full path and filename of the object to be copied */
     ,outloc=          /* full path and filename of object to be created */
     ,inref=____in   /* override default to use own filerefs */
     ,outref=____out /* override default to use own filerefs */
     ,mode=CREATE
     ,iftrue=%str(1=1)
 )/*/STORE SOURCE*/;
   %local mod;
  
   %if not(%eval(%unquote(&iftrue))) %then %return;
  
   %if &mode=APPEND %then %let mod=mod;
  
   /* these IN and OUT filerefs can point to anything */
   %if &inref = ____in %then %do;
     filename &inref &inloc lrecl=1048576 ;
   %end;
   %if &outref=____out %then %do;
     filename &outref &outloc lrecl=1048576 &mod;
   %end;
  
   /* copy the file byte-for-byte  */
   data _null_;
     infile &inref lrecl=1 recfm=n;
     file &outref &mod recfm=n;
     input sourcechar $char1. @@;
     format sourcechar hex2.;
     put sourcechar char1. @@;
   run;
  
   %if &inref = ____in %then %do;
     filename &inref clear;
   %end;
   %if &outref=____out %then %do;
     filename &outref clear;
   %end;
 %mend mp_binarycopy;

/***************************************************************************************************/
/* Macro to get report name from the report id */
%macro get_report_info(repid, outds=report_list_full);
	filename resp temp;
	proc http
	  method='GET' 
	  url="&BASE_URI/reports/reports/&repid"
	  oauth_bearer=sas_services
	  out=resp
	  verbose
	  ;
	  headers
	    "Accept" = "application/vnd.sas.report+json"
	  ;
	  debug level=0;
	run;
	libname resp json;

	data report_list_tmp;
		set resp.root;
		report_id = id;
		keep report_id name;
	run;

	proc append base=&outds data=report_list_tmp force;
	run;
%mend get_report_info;

/***************************************************************************************************/
%macro transform_image(filename,basefilename);
    filename timg pipe "rsvg-convert -a &filename > &save_rootdir_tmp/&basefilename..png";
	data _null_;
		infile timg;
		input;
		put _infile_;
	run;
%mend;

/***************************************************************************************************/
/* Macro
 * Get job info
 * using API
 * https://developer.sas.com/apis/rest/v3.5/Visualization/#get-specified-job
 */
%macro get_report_job_info(jobid, reportid, outds);
	filename resp temp;
	proc http
	  method='GET' 
	  url="&BASE_URI/reportImages/jobs/&jobid"
	  oauth_bearer=sas_services
	  out=resp
	  verbose
	  ;
	  headers
	    "Accept" = "application/vnd.sas.report.images.job+json"
	    "Content-Type" = "application/vnd.sas.report.images.job.request+json"
	  ;
	  debug level=0;
	run;
	
	libname resp json;
	
	proc sql;
	  create table img_info_tmp as
	  select
	    img.*, "&reportid" as report_id, "&jobid" as job_id
	  from
	    resp.images as img
	  ;
	quit;
	proc append base=&outds data=img_info_tmp force;
%mend get_report_job_info;

/***************************************************************************************************/
%macro print_images(filename, titl,folder);
	title "&titl" ;
	data _NULL_;
	 	dcl odsout obj();
		obj.image(file:"&folder/&filename..png", height:"1440", width:"2560");
	run;
%mend;

/***************************************************************************************************/
%macro generate_ppt_file(user, report_id, job_id, pptxName);
	filename ppt temp;
	data _null_;
	  set loop_ppt_table(where=(user="&user" and report_id="&report_id"));
	  file ppt;
	  length line $ 2048;
	  line = cats('%print_images(', cats("filename=", image_filename), ",", cats("titl=",sectionLabel),",", cats("folder=","&SAVE_ROOTDIR_TMP"), ")");
	  put line;
	  putlog line;
	run;

	ods powerpoint file="&SAVE_ROOTDIR/tmp/tmp_report_ppt.pptx";
	%inc ppt / source2;
	ods powerpoint close;

	/* Copy the powerpoint file to the target location in the content */
	filename tgtdir filesrvc folderPath="&CONTENT_DIR/&user" name="&pptxName";
	%mp_binarycopy(inloc="&SAVE_ROOTDIR/tmp/tmp_report_ppt.pptx", outref=tgtdir);
%mend generate_ppt_file;


/***************************************************************************************************/
/***************************************************************************************************/
/* MAIN PROGRAM                                                                                    */
/***************************************************************************************************/
/***************************************************************************************************/
/* Get the list of job id from the save_root dir */
/*DBG*/
/*Filename F_LSTSVG pipe "find /tmp/svg_va_tmp -type f -mmin -60 -name '*.svg'";*/

/* Cleanse tmp directory before generating any new files to avoid remaining old files */
x "rm -f &SAVE_ROOTDIR_TMP/*";

Filename filelist pipe "find &SAVE_ROOTDIR -type f -mmin -60 -name '*.svg'";

data image_list;                                        
     Infile filelist truncover;
     Input filename $512.;
	 length user $ 50 report_id $ 50 job_id $ 50 image_filename $ 200;
	 user=scan(filename,3,'/');
	 report_id=scan(filename,4,'/');
	 job_id=scan(filename,5,'/');
	 ordinal_images=input(scan(scan(filename,6,'/'),1,"_"),best.);
	 image_filename=translate(tranwrd(filename, "&SAVE_ROOTDIR/", ""), "_", "/");
run;

proc sort data=image_list;
	by report_id job_id;
run;

/* deduplicate the previous table */
data report_list;
 set image_list;
 by report_id job_id;
 if first.report_id;
 keep report_id job_id;
run;

proc sort data=image_list;
	by report_id user job_id;
run;

/* deduplicate the previous table on user report ands job */
data report_user_list_tmp;
 set image_list;
 by report_id user job_id;
 if first.report_id;
 keep report_id user job_id;
run;

proc datasets nodetails nolist nowarn;
	delete report_list_full;
run;

data _null_;
	set report_list;
	call execute('%get_report_info('||report_id||')');
run;                                              

proc sql;
	create table report_list_full as select A.report_id, A.name, B.job_id 
	from report_list_full as A, report_list as B where A.report_id = B.report_id;
quit;

proc sql;
	create table report_user_list as select A.report_id, A.name, B.job_id, B.user 
	from report_list_full as A, report_user_list_tmp as B  where A.report_id = B.report_id;
quit;

* ****************************************************************************************************;
* GENERATE PNG from SVG files through inkscape module installed on RHEL 7 by : sudo yum install inkscape;
* it is done for all users and report at once;
* ****************************************************************************************************;

filename transf temp;
data _null_;
  set image_list;
  file transf;
  length line $ 2048;
  line = cats(
    '%transform_image(', cats("filename=", filename ),',',cats("basefilename=", image_filename ), ')');
  put line;
  putlog line;
run;

%inc transf / source2;

proc datasets nodetails nolist nowarn;
	delete img_info;
run;

data _null_;
	set report_list_full;
	call execute('%get_report_job_info(jobid='||trim(job_id)||',reportid='||report_id||',outds=img_info)');
run;

/* prepare loop table with : report_id, user, full image filname (svg), section label */
proc sql;
	create table loop_ppt_table as
	select A.user, A.report_id, A.filename, A.image_filename, A.job_id, B.sectionLabel, B.ordinal_images
	from WORK.IMAGE_LIST as A, WORK.IMG_INFO as B
	where A.job_id=B.job_id and A.ordinal_images=B.ordinal_images;
quit;

proc sort data=loop_ppt_table;
	by user report_id ordinal_images;
run;

* *******************************************************************************************************;
* MAIN LOOP
* *******************************************************************************************************;

data _null_;
	set report_user_list;
	put "Generating powerpoint for user : " user " and report " report_id;
	call execute('%generate_ppt_file('||user||','||report_id||','||job_id||','||strip(name)||'.pptx)');
run;

/* Cleansing */

x "rm -f &SAVE_ROOTDIR_TMP/*";

* ***************************************************************************************;
* END *;
* ***************************************************************************************;
